@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IFileService fileService
@inject IToastService toastService


@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h4 class="checkout-title">Edit "@product.Title"</h4>
    }
    else if (product.IsNew)
    {
        <h4 class="checkout-title">Create a new Product</h4>
    }

    <div class="container">
        <div class="checkout-form">
            <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="row">
                    <div class="col-4">
                        <div class="img_wrapper @activeCssClass">
                            <div class="img_input-block">
                                <label for="imageUrl" class="img_label">
                                    <InputFile id="imageUrl" @bind-Value="product.ImageUrl" class="input_file" OnChange="OnFileChange" accept="image/jpg , image/png , image/gif"></InputFile>
                                    @*<InputText id="imageUrl" @bind-Value="product.ImageUrl" class="input_file"></InputText>*@
                                    <div class="img_text">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <span>Browser Image to Upload</span>
                                    </div>
                                </label>
                            </div>
                            <div class="img_content">
                                <img src="@(product.ImageUrl)" alt="" onerror="this.style.display='none'" onload="this.style.display=''" />
                            </div>
                        </div>
                    </div>
                    <div class="col-8">
                        <div class="row">
                            <div class="col-12 mb-0">
                                <label for="title">Title</label>
                                <InputText id="title" @bind-Value="product.Title" placeholder="Title"></InputText>
                            </div>

                            <div class="col-12 order-note-block mb-0">
                                <label for="description">Description</label>
                                <InputTextArea id="description" @bind-Value="product.Description" placeholder="Description"></InputTextArea>
                            </div>
                            <div class="col-12 mb-0">
                                <label for="category">Category</label>
                                <InputSelect id="category" @bind-Value="product.CategoryId" class="col-select">
                                    2
                                    @foreach (var category in CategoryService.AdminCategories)
                                    {
                                    <option value="@category.Id">@category.Name</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="col-12 mb--20 mt--30 header">
                    <div class="col">Product Type / Variant</div>
                    <div class="col">Price</div>
                    <div class="col">Original Price</div>
                    <div class="col">Visible</div>
                    <div class="col"></div>
                </div>
                @foreach (var variant in product.Variants)
                    {
                        <div class="row">
                            <div class="col">
                                <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="col-select">
                                    @foreach (var productType in ProductTypeService.ProductTypes)
                                    {
                                <option value="@productType.Id.ToString()">@productType.Name</option>
                                    }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Price" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.OriginalPrice" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-outlined" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                            <i class="far fa-trash-alt"></i>
                        </button>
                    </div>
                </div>
                    }
                    <div class="col-12 mb--30">
                        <button type="button" class="btn btn--primary " @onclick="AddVariant">
                            <i class="fas fa-plus pr-2"></i> Add Variant
                        </button>
                    </div>
                    <div class="col-12 mb--20">
                        <div class="block-border check-bx-wrapper">
                            <div class="check-box">
                                <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                                <label for="featured" class="form-check-label">Featured</label>
                            </div>
                            <div class="check-box">
                                <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                                <label for="visible" class="form-check-label">Visible</label>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 d-flex justify-content-end">
                        <button type="submit" class="btn btn--primary mr-3">@btnText</button>
                        @if (!product.IsNew)
                        {
                            <button type="button" class="btn btn-danger" @onclick="DeleteProduct">
                                Delete Product
                            </button>
                        }
                    </div>
                </div>
                <ValidationSummary></ValidationSummary>
            </EditForm>
        </div>


    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    Product product = new Product();
    ImageFile filebase64;
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";
    private bool active = false;
    private string activeCssClass => active ? "active" : null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        if (string.IsNullOrEmpty(product.ImageUrl))
        {
            active = false;
        }
        else
        {
            active = true;
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants
            .Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            toastService.ShowSuccess("The product has been created");
            NavigationManager.NavigateTo($"admin/products");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            toastService.ShowSuccess("The product has been updated");
            NavigationManager.NavigateTo($"admin/products");
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            toastService.ShowWarning("The product has been deleted.");
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizeImage = await e.File.RequestImageFileAsync(format, 400, 400);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        Console.WriteLine(imageData);
        product.ImageUrl = imageData;
        if (string.IsNullOrEmpty(product.ImageUrl))
        {
            active = false;
        }
        else
        {
            active = true;
        }
    }

}
